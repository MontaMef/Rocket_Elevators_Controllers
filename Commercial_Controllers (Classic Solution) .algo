
//------------------------------------------------- BRIEF DESCRIPTION / SUMMARY / NOTES -------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------

// BRIEF DESCRIPTION:

This algorithm is based on CLASSIC SOLUTION to serve users of elevators in Commercial and Corporate buildings. The following text 
explains this concept:
The distribution of 12 elevators are done in 4 Columns. Each Column contains 3 elevators and each one serves an equal 
number of floors (excluding the first column wich serves only to go to the basement floors). For example, if someone want to go from 
first floor to floor 35. He should take an elevator from RC to 20th floor and than from 20th floor to floor nbr 35. Each column 
serves only 20 floors and only column-1 and column-2 had access to first floor

Advantage: Distribute the service of floors between cloumns
Disadvantage: This algorithm does not allow users to use only one elevator to reach floors higher then 20.
They should take more than one elevator. It is not good choice for many poeple.


// SUMMARY:

1- SEQUENCES OF ADDITIONAL REQUIREMENTS
2- SEQUENCES OF ESSENTIALS REQUIREMENTS
3- MAIN PROGRAM 
4- TESTING PROGRAM


// NOTES:

Attributes:
Elevator-N-Position is an attribute of Elevator-N 

Status:
Elevator-Status has Four Differents Status: 
Activ: When it is using by persons
Inactiv: When It is Not Used. 
ON SERVICE: If There Is No Problem Detected By Alarm System Of The Building
OUT OF SERVICE: If THere Is Problems Detected By Alarm System Of The Building

Alarm-Status: It has only two status (It is an alarm of the entire building. So the outputs are considered as entries in this algorithm)
Problem: Whwn alarm detects problems like fire or seisim ect.
NoProblem: No problems to be detected

Distribution Of Floors And Elevators By Columns
Column-1 FLOORS (-1, -2, -3, -4, -5, -6)  ELEVATORS (1, 2, 3)
Column-2 FLOORS (1 to 20)                 ELEVATORS (4, 5, 6)
Column-3 FLOORS (20 to 40)                ELEVATORS (7, 8, 9)
Column-4 FLOORS (40 to 60)                ELEVATORS (10, 11, 12)

//------------------------------------------------ 1- SEQUENCES OF ADDITIONAL REQUIREMENTS --------------------------------------------------
------------------------------------------------- SEQUENCES ARE ORDERED BY ALPHABETIC ORDER -----------------------------------------------

// Logic To Operate Situation If Alarm System Of The Building Detects Problem. It Has Only Two Status Problem Or NoProblem

SEQUENCE Check-Alarm-Status  USING Alarm-Status
    
    Variable Elevator-Status = ON SERVICE
    WHILE( Alarm-Status:Problem )DO
        Set Elevator-Status = OUT OF SERVICE
        CALL Open-Door
        Display = "OUT OF SERVICE"
    END WHILE

END SEQUENCE


// Logic Of Loading: Check Weight until becoming less than 2000 KG

SEQUENCE Check-Weight USING Weight
    
    WHILE (Weight >= 2000 KG) DO
        Display = "Weight is exceeding the capacity of elevator"
        Set Elevator-Status = OUT OF SERVICE
        CALL Open-Door
    END WHILE

    Go To Next Step

END SEQUENCE

//----------------------------------------------- 2- SEQUENCES OF ESSENTIALS REQUIREMENTS ----------------------------------------------
------------------------------------------------- SEQUENCES ARE ORDERED BY ALPHABETIC ORDER --------------------------------------------

// Logic To Close Doors

SEQUENCE Close-Doors USING Time AND Barrier

    Variable Waiting-Time = 0 sec
    WHILE (Waiting-Time < 7 seconds OR Barrier = True) DO
        SET Doors-Situation = Opened
        Waiting-Time = Waiting-Time + 1 sec
    END WHILE

    SET Doors-Situation = Closed

END SEQUENCE


// Find Available And Nearest Elevator By Searching Distance And Direction

SEQUENCE Find-Best-Elevator USING CurrentFloor AND Direction AND ElevatorN-Position
    
    Variable ARRAY Column-N = Elevator-1 to Elevator-N                         // In our case Elevator-1, Elevator-2  and Elevator-3

    // Suppose Initially That The Best Elevator is Elevator-1

    Variable Best-Elevator = Elevator-1                               
    Variable Best-Distance = |Elevator-1-Position  -  Current-Floor|
    Variable Column-N = Column-1

    FOR EACH Elevator-N IN Column-N
        IF ( |Elevator-N-Position  -  Current-Floor| < Best-Distance ) 

            IF((Elevator-N is Inactiv) OR (Elevator-N is Activ AND Same Direction))
                
                Best-Elevator = Elevator-N
                Best-Distance = |Elevator-N-Position - Current-Floor|

            END IF
          
        END IF 

    END FOR

    Variable Best-Elevator-Position = Best-Elevator Postion
    Return Best-Elevator, Best-Elevator Postion     // Elevator Attribute

END SEQUENCE


// Logic To Move Elevator To Current-Floor

SEQUENCE Move-Elevator-To-CurrentFloor USING Current-Floor AND Best-Elevator-Position

    
    While ((Current-Floor - Best-Elevator-Position) > 0) DO  // Example 5-2 > 0
        Move Up
        REPEAT
            Incriment Floor
        UNTIL Current-Floor = Best-Elevator-Position
    END WHILE

    While ((Current-Floor - Best-Elevator-Position) < 0) DO  // Example 3-6 < 0
        Move Down
        REPEAT
            Dicriment Floor
        UNTIL Current-Floor = Best-Elevator-Position
    END WHILE

END SEQUENCE


// Logic To Move Elevator To Distination

SEQUENCE Move-Elevator-To-Destination USING Current-Floor AND Demand-Floor

    
    While ((Demand-Floor - Current-Floor) > 0) DO
        Move Up
        REPEAT
            Incriment Floor
        UNTIL Demand-Floor = Current-Floor
    END WHILE

    While ((Demand-Floor - Current-Floor) < 0) DO
        Move Down
        REPEAT
            Dicriment Floor
        UNTIL Demand-Floor = Current-Floor
    END WHILE

END SEQUENCE


// Logic To Open Doors

SEQUENCE Open-Doors USING Time AND Barrier

    SET Doors-Situation = Opened
    Variable Waiting-Time = 0 sec
    WHILE (Waiting-Time < 7 seconds OR Barrier = True OR Alarm-Status:Problem) DO
        SET Doors-Situation = Opened
        Waiting-Time = Waiting-Time + 1 sec
    END WHILE

    SET Doors-Situation = Closed

END SEQUENCE



//  ----------------------------------------------------- 3- MAIN PROGRAM  -------------------------------------------------------------
//  --------------------------------------------------  SEQUENCES ARE ORDERED BY LOGIC ORDER  ------------------------------------------

// When User push the Call-Button.
// By Pushing Call-Button The Following Informations Will Be Known: Current-Floor AND Direction

SEQUENCE Request-Elevator     USING       Current-Floor AND Direction
    
    CALL Find-Best-Elevator               WITH  Current-Floor AND Direction 
    CALL Check-Alarm-Status               WITH  Alarm-Status  // Alarm System Of The Building. It Has Only Two Status Problem Or NoProblem
    CALL Move-Elevator-To-CurrentFloor    WITH  Current-Floor AND Elevator-Position                                
    CALL Open-Doors                       WITH  Waiting-Time AND Barrier 

END SEQUENCE


// When User push the Request-Floor-Button From inside Elevator

SEQUENCE Request-Floor        USING       Demand-Floor AND Current-Floor         
    
    CALL Check-Weight                     WITH  Weight
    CALL Check-Alarm-Status               WITH  Alarm-Status
    CALL Close-Doors                      WITH  Waiting-Time AND Barrier                                     
    CALL Move-Elevator-To-Destination     WITH  Current-Floor AND Demand-Floor
    CALL Open-Doors                       WITH  Waiting-Time AND Barrier 

END SEQUENCE


//------------------------------------------------- 4- TESTING PROGRAM  -----------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------

//Scenario 1: With second column (or column B) serving floors from 2 to 20, with elevator B1 at 20th floor going to 5th, B2 at 3rd floor 
going to 15th, B3 at 13th floor going to 1st, B4 at 15th floor going to 2nd, and B5 at 6th floor going to 1st, someone is at 1st floor
and requests the 20th floor, elevator B5 is expected to be sent


Column-2 (B)   FLOORS (1 to 20)                   ELEVATORS B1, B2, B3, B4, B5)

SEQUENCE Request-Elevator     USING       Current-Floor = 1 AND Direction = UP
    
    CALL Find-Best-Elevator               Result:  B5
    CALL Alarm-Status                     Result:  ok
    CALL Move-Elevator-To-CurrentFloor    Result:  B5 Move From 6th Floor To 1st Floor                            
    CALL Open-Doors                       Result:  Ok

END SEQUENCE

SEQUENCE Request-Floor        USING       Demand-Floor = 20 AND  Current-Floor = 1         
    
    CALL Check-Weight                     Result: ok
    CALL Check-Alarm-Status               Result: ok
    CALL Close-Doors                      Result: ok                            
    CALL Move-Elevator-To-Destination     Result: B5 Move From 1st Floor to 20th Floor
    CALL Open-Doors                       Result: ok



------------------------------------------------------------ END ------------------------------------------------------------------




