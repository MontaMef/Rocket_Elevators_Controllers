
//------------------------------------------------- BRIEF DESCRIPTION / SUMMARY / NOTES -------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------

// BRIEF DESCRIPTION:

This algorithm is based on MODERN SOLUTION to serve users of elevators in Commercial and Corporate buildings. The following text 
explains this concept:
In the first floor there is a panel fixed outside elevators allowing user to demand the request floor by entering its number 
(so there is no need to fix a Call-Button in the first floor). The algorithm will do some calculations and display the best available 
elevator to take. The distribution of 12 elevators are done in 4 Columns. Each Column contains 3 elevators and each one serves an equal 
number of floors (excluding the first column wich serves only to go to the basement floors). This method allows system to reduce 
the waiting-time. To go back, User push Call-Button fixed outside elevators in each floor (excluding first floor) and the algorithm 
will find the best available elevator to take user back to the first floor.

Advantage: Reduce the waiting-time
Disadvantage: This algorithm does not allow users to use elevators in enetnd to go betwwen other floors. 
Instead, it serves only between first floor and demand floor or between current floor and first floor.


// SUMMARY:

1- SEQUENCES OF ADDITIONAL REQUIREMENTS
2- SEQUENCES OF ESSENTIALS REQUIREMENTS
3- MAIN PROGRAM 
4- TESTING PROGRAM


// NOTES:

Attributes:
Elevator-N-Position is an attribute of Elevator-N 

Status:
Elevator-Status has Four Differents Status: 
Activ: When it is using by persons
Inactiv: When It is Not Used. 
ON SERVICE: If There Is No Problem Detected By Alarm System Of The Building
OUT OF SERVICE: If THere Is Problems Detected By Alarm System Of The Building

Alarm-Status: It has only two status (It is an alarm of the entire building. So the outputs are considered as entries in this algorithm)
Problem: Whwn alarm detects problems like fire or seisim ect.
NoProblem: No problems to be detected

Distribution Of Floors And Elevators By Columns: 1 = RC
Column-1 FLOORS (-1, -2, -3, -4, -5, -6)     ELEVATORS (1, 2, 3)
Column-2 FLOORS (1 to 20)                    ELEVATORS (4, 5, 6)
Column-3 FLOORS (1, 21 to 40)                ELEVATORS (7, 8, 9)
Column-4 FLOORS (1, 41 to 60)                ELEVATORS (10, 11, 12)

//------------------------------------------------ 1- SEQUENCES OF ADDITIONAL REQUIREMENTS --------------------------------------------------
------------------------------------------------- SEQUENCES ARE ORDERED BY ALPHABETIC ORDER -----------------------------------------------

// Logic To Operate Situation If Alarm System Of The Building Detects Problem. It Has Only Two Status Problem Or NoProblem

SEQUENCE Check-Alarm-Status  USING Alarm-Status
    
    Variable Best-Elevator-Status = ON SERVICE         // Attribute
    WHILE( Alarm-Status:Problem )DO
        Set Best-Elevator-Status = OUT OF SERVICE
        CALL Open-Door
        Display in Best-Elevator  = "OUT OF SERVICE"
    END WHILE

END SEQUENCE


// Logic Of Loading: Check Weight until becoming less than 2000 KG

SEQUENCE Check-Weight USING Weight
    
    WHILE (Best-Elevator-Weight >= 2000 KG) DO
        Display in Best-Elevator = "Weight is exceeding the capacity of elevator"
        Set Best-Elevator-Status = OUT OF SERVICE
        CALL Open-Door
    END WHILE

    Go To Next Step

END SEQUENCE


//----------------------------------------------- 2- SEQUENCES OF ESSENTIALS REQUIREMENTS -------------------------------------------------
------------------------------------------------- SEQUENCES ARE ORDERED BY ALPHABETIC ORDER -----------------------------------------------

// Logic To Close Doors

SEQUENCE Close-Doors USING Time AND Barrier

    Variable Waiting-Time = 0 sec
    WHILE (Best-Elevator-Waiting-Time < 7 seconds OR Barrier = True) DO
        SET Best-Elevator-Doors-Situation = Opened
        Best-Elevator-Waiting-Time = Best-Elevator-Waiting-Time + 1 sec
    END WHILE

    SET Best-Elevator-Doors-Situation = Closed       // Attribute

END SEQUENCE


// Logic To Choose The Right Column To Serve User.

SEQUENCE Find-Best-Column USING Demand-Floor

    Variable ARRAY Column-1 = 1, -1 To -N       
    // In Our Case 1, -1 To -6. This Column Serves Users To Reach Basements
    // For Mathematic Reasons, I replaced B1 By -1 Until B6 By -6

    Variable Nbr-Column = 3                     // Given By Requirements For The Commercial Controller

    // The Following Calculations Helps To Know The Number Of Floors To Be Served By Each Column

    Variable Nbr-Floor-Served-By-Column = (Nbr-Floor  -  Nbr-Basement-Floor) / Nbr-Column        
    // In Our Case 20 Floors Per Column, (66-6)/3 = 20

    // The Following Arrays Contains Floors To Be Served By Each Column (Excluding Basements)

    Variable ARRAY Column-2 = 1  To  Value OF Nbr-Floor-Served-By-Column    
    // In Our Case 1 To 20

    Variable ARRAY Column-3 = 1,  Value Of Nbr-Floor-Served-By-Column +1  To  Value Of 2x Nbr-Floor-Served-By-Column  
    // In Our Case 1, 21 To 40

    Variable ARRAY Column-4 = 1, Value Of 2x Nbr-Floor-Served-By-Column +1  To  Value Of 3x Nbr-Floor-Served-By-Column
    // In Our Case 1, 41 To 60

    Variable ARRAY ColumnS = Column-1 To Column-N        // This ARRAY regroups all the Columns
    // In Our Case ColumnS = Column-1, Column-2, Column-3, Column-4 

    FOR EACH Column-N IN ColumnS

        IF (Demand-Floor Belong to ARRAY column-N)
            Best-Column = column-N
        END IF

    END FOR

    RETURN Best-Column

END SEQUENCE


//Logic To Find The Best And Nearest Elevator By Searching In Best-Column

SEQUENCE Find-Best-Elevator USING Best-Column AND Direction

    //  Suppose Initially That The Best Elevator is First-Elevator-IN-Best-Column
    
    Variable Best-Elevator = First-Elevator-IN-Best-Column    // From The ARRAY Of Best-Column                          
    Variable Best-Distance = |First-Elevator-IN-Best-Column-Position  -  First-Floor|

    FOR EACH Elevator-N IN Best-Column

        IF ( |ElevatorN-Position  -  First-Floor| < Best-Distance ) 

            IF((ElevatorN is Inactiv) OR (ElevatorN is Activ AND Opposite Direction))
                
                        Best-Elevator = ElevatorN
                        Best-Distance = |ElevatorN-Position - First-Floor|

            END IF
          
        END IF 

    END FOR

    RETURN Best-Elevator

END SEQUENCE


SEQUENCE Find-Best-Elevator-Back USING Current-Floor AND Column-N AND Direction

    //  Suppose Initially That The Best Elevator is First Elevator In The ARRAY Of Column-N

    Variable Best-Elevator-Down = First-Elevator-OF-Column-N                               
    Variable Best-Distance = |First-Elevator-OF-Column-N-Position  -  Current-Floor|
    
    FOR EACH Elevator-N IN Column-N
        IF ( |Elevator-N-Position  -  Current-Floor| < Best-Distance ) 

            IF((Elevator-N is Inactiv) OR (Elevator is Activ AND Same Direction))
                
                Best-Elevator = Elevator-N
                Best-Distance = |Elevator-N-Position - Current-Floor|

            END IF
          
        END IF 

    END FOR

    Return Best-Elevator, Best-Elevator Position  // Elevator Attribute

END SEQUENCE

// Logic To Move Best Elevator To Current Floor To GO To The First Floor

SEQUENCE Move-Elevator-To-Current-Floor USING Current-Floor AND Best-Elevator

    While ((Current-Floor - Best-Elevator-Position) >o ) DO               //Example: 5 - 4 > 0 
        Move Best-Elevator Up
        REPEAT
            Incriment Floor
        UNTIL Current-Floor = Best-Elevator-Position
    END WHILE

    While ((Current-Floor - Best-Elevator-Position) < 0) DO                //Example: 5 - 10 < 0
        Move Best-Elevator Down
        REPEAT
            Dicriment Floor
        UNTIL Current-Floor = Best-Elevator-Position
    END WHILE

END SEQUENCE


// Logic to Move Best Elevator To Destination

SEQUENCE Move-Elevator-To-Destination USING First-Floor AND Demand-Floor

    While ((Demand-Floor  -  First-Floor ) > 0) DO             // Example: 10-1 > 0 
        Move Best-Elevator Up
        REPEAT
            Incriment Floor
        UNTIL First-Floor = Best-Elevator-Position
    END WHILE

    While ((Demand-Floor  -  First-Floor) < 0) DO              //Example: -1-1 < 0
        Move Best-Elevator Down
        REPEAT
            Dicriment Floor
        UNTIL First-Floor = Best-Elevator-Position
    END WHILE

END SEQUENCE


SEQUENCE  Move-Elevator-To-First-Floor  USING  Best-Elevator AND First-Floor

    
     While ((First-Floor - Best-Elevator-Position) > 0) DO   // Example: 1 - (-1) > 0
        Move Best-Elevator Up
        REPEAT
        Incriment Floor
        UNTIL First-Floor = Best-Elevator-Position
    
    END WHILE
    
    While ((First-Floor - Best-Elevator-Position) < 0) DO    // Example: 1 - 10 < 0
        Move Best-Elevator Down
        REPEAT
            Dicriment Floor
        UNTIL First-Floor = Best-Elevator-Position

    END WHILE

END SEQUENCE


// Logic To Open Doors

SEQUENCE Open-Doors USING Time AND Barrier

    SET Best-Elevator-Doors-Situation = Opened      // Attribute
    Variable Waiting-Time = 0 sec
    WHILE (Best-Elevator-Waiting-Time < 7 seconds OR Barrier = True OR Alarm-Status:Problem) DO
        SET Best-Elevator-Doors-Situation = Opened
        Best-Elevator-Waiting-Time = Best-Elevator-Waiting-Time + 1 sec
    END WHILE

    SET Best-Elevator-Doors-Situation = Closed

END SEQUENCE


//  ----------------------------------------------------- 3- MAIN PROGRAM  ---------------------------------------------------------
//  --------------------------------------------------  SEQUENCES ARE ORDERED BY LOGIC ORDER  -------------------------------------

// When User push the Request-Floor-Button From Outside Elevator (From A Panel Fixed Outside The Elevators Without USING A Call-Button)
In The First Floor (RC) To Go UP Or DOWN

SEQUENCE Request-Floor         USING      Demand-Floor AND  Current-Floor = 1st-Floor
    
    CALL Find-Best-Column                 WITH  Demand-Floor 
    CALL Find-Best-Elevator               WITH  Best-Column AND Direction 
    CALL Check-Alarm-Status               WITH  Alarm-Status // Alarm System Of The Building. It Has Only Two Status Problem Or NoProblem
    CALL Move-Elevator-To-First-Floor     WITH  Best-Elevator AND 1st Floor  // Attribute Of Best-Elevator                               
    CALL Open-Doors                       WITH  Waiting-Time AND Barrier 
    CALL Check-Weight                     WITH  Weight        // If Weight >= 2000KG Display: Weight is exceeding the capacity of elevator
    CALL Check-Alarm-Status               WITH  Alarm-Status // Alarm System Of The Building. It Has Only Two Status Problem Or NoProblem
    CALL Close-Doors                      WITH  Waiting-Time AND Barrier                                     
    CALL Move-Elevator-To-Destination     WITH  1st-Floor AND Demand-Floor
    CALL Open-Doors                       WITH  Waiting-Time AND Barrier 

END SEQUENCE


// When User Push the Call-Button From Outside Elevator To Go To The First Floor (RC)
// By Pushing Call-Button The Following Informations Will Be Known: Current-Floor AND Column-N AND Direction

SEQUENCE Request-First-Floor    USING     Current-Floor AND Column-N AND Direction
    
    CALL Find-Best-Elevator-Back          WITH  Current-Floor AND Column-N AND Direction
    CALL Check-Alarm-Status               WITH  Alarm-Status // Alarm System Of The Building. It Has Only Two Status Problem Or NoProblem
    CALL Move-Elevator-To-Current-Floor   WITH  Current-Floor AND Best-Elevator                            
    CALL Open-Doors                       WITH  Waiting-Time AND Barrier 
    CALL Check-Weight                     WITH  Weight
    CALL Check-Alarm-Status               WITH  Alarm-Status
    CALL Close-Doors                      WITH  Waiting-Time AND Barrier                                     
    CALL Move-Elevator-To-First-Floor     WITH  Current-Floor AND First-Floor AND Best-Elevator
    CALL Open-Doors                       WITH  Waiting-Time AND Barrier 

END SEQUENCE


//------------------------------------------------- 4- TESTING PROGRAM  -----------------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------

//Scenario 1: With second column (or column B) serving floors from 2 to 20, with elevator B1 at 20th floor going to 5th, B2 at 3rd floor 
going to 15th, B3 at 13th floor going to 1st, B4 at 15th floor going to 2nd, and B5 at 6th floor going to 1st, someone is at 1st floor 
and requests the 20th floor, elevator B5 is expected to be sent

Distribution Of Floors And Elevators By Columns: 1 = RC

Column-2 (B)  FLOORS (1 to 20)                    ELEVATORS (B1, B2, B3, B4, B5)



SEQUENCE Request-Floor         USING      Demand-Floor = 20
    
    CALL Find-Best-Column                      Result Column-2 (B)
    CALL Find-Best-Elevator                    Result B5
    CALL Check-Alarm-Status                    Result ok
    CALL Move-Elevator-To-First-Floor          Result B5 Move From 6th Floor To 1st Floor                      
    CALL Open-Doors                            Result ok
    CALL Check-Weight                          Result ok
    CALL Check-Alarm-Status                    Result ok
    CALL Close-Doors                           Result ok                           
    CALL Move-Elevator-To-Destination          Result B5 Move From 1st Floor To 20th Floor
    CALL Open-Doors                            Result ok

END SEQUENCE

--------------------------------------------------------------------------------------------------------------------------------------
//Scenario 2: With third column (or column C) serving floors from 21 to 40, with elevator C1 at 1st floor going to 21th, 
C2 at 23st floor going to 28th, C3 at 33rd floor going to 1st, C4 at 40th floor going to 24th, and C5 at 39nd floor going to 1st, 
someone is at 1st floor and requests the 36th floor, elevator C1 is expected to be sent

Distribution Of Floors And Elevators By Columns: 1 = RC

Column-3 (C)  FLOORS (1, 21 to 40)                ELEVATORS (C1, C2, C3, C4, C5)

SEQUENCE Request-Floor         USING      Demand-Floor = 36
    
    CALL Find-Best-Column                      Result  Column-3 (C)
    CALL Find-Best-Elevator                    Result  C1
    CALL Check-Alarm-Status                    Result  ok
    CALL Move-Elevator-To-First-Floor          Result  Already AT 1st Floor                       
    CALL Open-Doors                            Result  ok
    CALL Check-Weight                          Result  ok
    CALL Check-Alarm-Status                    Result  ok
    CALL Close-Doors                           Result  ok                          
    CALL Move-Elevator-To-Destination          Result  C1 To 21st And Than To 36
    CALL Open-Doors                            Result  ok

END SEQUENCE



-------------------------------------------------- END --------------------------------------------------------------------------------